// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: settings/v1/settings.proto

package settingsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SettingsService_CreateSettings_FullMethodName = "/com.facehunter.scanner.settings.v1.SettingsService/CreateSettings"
	SettingsService_ReadSettings_FullMethodName   = "/com.facehunter.scanner.settings.v1.SettingsService/ReadSettings"
	SettingsService_UpdateSettings_FullMethodName = "/com.facehunter.scanner.settings.v1.SettingsService/UpdateSettings"
	SettingsService_DeleteSettings_FullMethodName = "/com.facehunter.scanner.settings.v1.SettingsService/DeleteSettings"
	SettingsService_ListSettings_FullMethodName   = "/com.facehunter.scanner.settings.v1.SettingsService/ListSettings"
)

// SettingsServiceClient is the client API for SettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsServiceClient interface {
	CreateSettings(ctx context.Context, in *CreateSettingsRequest, opts ...grpc.CallOption) (*CreateSettingsResponse, error)
	ReadSettings(ctx context.Context, in *ReadSettingsRequest, opts ...grpc.CallOption) (*ReadSettingsResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	DeleteSettings(ctx context.Context, in *DeleteSettingsRequest, opts ...grpc.CallOption) (*DeleteSettingsResponse, error)
	ListSettings(ctx context.Context, in *ListSettingsRequest, opts ...grpc.CallOption) (*ListSettingsResponse, error)
}

type settingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsServiceClient(cc grpc.ClientConnInterface) SettingsServiceClient {
	return &settingsServiceClient{cc}
}

func (c *settingsServiceClient) CreateSettings(ctx context.Context, in *CreateSettingsRequest, opts ...grpc.CallOption) (*CreateSettingsResponse, error) {
	out := new(CreateSettingsResponse)
	err := c.cc.Invoke(ctx, SettingsService_CreateSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) ReadSettings(ctx context.Context, in *ReadSettingsRequest, opts ...grpc.CallOption) (*ReadSettingsResponse, error) {
	out := new(ReadSettingsResponse)
	err := c.cc.Invoke(ctx, SettingsService_ReadSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, SettingsService_UpdateSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) DeleteSettings(ctx context.Context, in *DeleteSettingsRequest, opts ...grpc.CallOption) (*DeleteSettingsResponse, error) {
	out := new(DeleteSettingsResponse)
	err := c.cc.Invoke(ctx, SettingsService_DeleteSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) ListSettings(ctx context.Context, in *ListSettingsRequest, opts ...grpc.CallOption) (*ListSettingsResponse, error) {
	out := new(ListSettingsResponse)
	err := c.cc.Invoke(ctx, SettingsService_ListSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServiceServer is the server API for SettingsService service.
// All implementations should embed UnimplementedSettingsServiceServer
// for forward compatibility
type SettingsServiceServer interface {
	CreateSettings(context.Context, *CreateSettingsRequest) (*CreateSettingsResponse, error)
	ReadSettings(context.Context, *ReadSettingsRequest) (*ReadSettingsResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	DeleteSettings(context.Context, *DeleteSettingsRequest) (*DeleteSettingsResponse, error)
	ListSettings(context.Context, *ListSettingsRequest) (*ListSettingsResponse, error)
}

// UnimplementedSettingsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSettingsServiceServer struct {
}

func (UnimplementedSettingsServiceServer) CreateSettings(context.Context, *CreateSettingsRequest) (*CreateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSettings not implemented")
}
func (UnimplementedSettingsServiceServer) ReadSettings(context.Context, *ReadSettingsRequest) (*ReadSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSettings not implemented")
}
func (UnimplementedSettingsServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedSettingsServiceServer) DeleteSettings(context.Context, *DeleteSettingsRequest) (*DeleteSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSettings not implemented")
}
func (UnimplementedSettingsServiceServer) ListSettings(context.Context, *ListSettingsRequest) (*ListSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSettings not implemented")
}

// UnsafeSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServiceServer will
// result in compilation errors.
type UnsafeSettingsServiceServer interface {
	mustEmbedUnimplementedSettingsServiceServer()
}

func RegisterSettingsServiceServer(s grpc.ServiceRegistrar, srv SettingsServiceServer) {
	s.RegisterService(&SettingsService_ServiceDesc, srv)
}

func _SettingsService_CreateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).CreateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_CreateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).CreateSettings(ctx, req.(*CreateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_ReadSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).ReadSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_ReadSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).ReadSettings(ctx, req.(*ReadSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_DeleteSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).DeleteSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_DeleteSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).DeleteSettings(ctx, req.(*DeleteSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_ListSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).ListSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_ListSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).ListSettings(ctx, req.(*ListSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingsService_ServiceDesc is the grpc.ServiceDesc for SettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.facehunter.scanner.settings.v1.SettingsService",
	HandlerType: (*SettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSettings",
			Handler:    _SettingsService_CreateSettings_Handler,
		},
		{
			MethodName: "ReadSettings",
			Handler:    _SettingsService_ReadSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _SettingsService_UpdateSettings_Handler,
		},
		{
			MethodName: "DeleteSettings",
			Handler:    _SettingsService_DeleteSettings_Handler,
		},
		{
			MethodName: "ListSettings",
			Handler:    _SettingsService_ListSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings/v1/settings.proto",
}
